/* ======= Dashboard Financiero - Modo Oscuro Premium ======= */

@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap');

/* ======= Base ======= */
:root {
  --bg-color: #0d1117;
  --card-color: #161b22;
  --border-color: #30363d;
  --text-color: #e6edf3;
  --muted-color: #a5b3c2;
  --primary: #58a6ff;
  --success: #2ea043;
  --warning: #d29922;
  --danger: #f85149;
}

body {
  font-family: "Montserrat", sans-serif;
  background-color: var(--bg-color);
  color: var(--text-color);
  margin: 0;
  padding: 20px;
  line-height: 1.6;
}

/* ======= Títulos ======= */
h1, h2, h3 {
  font-weight: 600;
  color: var(--primary);
}

h1 {
  font-size: 1.8rem;
  margin-bottom: 10px;
}

h2 {
  font-size: 1.3rem;
  margin-top: 40px;
  color: var(--primary);
}

/* ======= Secciones ======= */
section, form {
  background: var(--card-color);
  border: 1px solid var(--border-color);
  border-radius: 10px;
  padding: 20px;
  margin-bottom: 25px;
  box-shadow: 0 0 10px #00000040;
}

/* ======= Inputs ======= */
label {
  display: block;
  font-size: 0.9rem;
  margin-bottom: 5px;
  color: var(--muted-color);
}

input, select {
  width: 100%;
  background: var(--bg-color);
  border: 1px solid var(--border-color);
  border-radius: 6px;
  padding: 8px 10px;
  color: var(--text-color);
  font-size: 0.9rem;
  margin-bottom: 12px;
  transition: all 0.2s ease;
}

input:focus, select:focus {
  border-color: var(--primary);
  box-shadow: 0 0 6px #58a6ff55;
  outline: none;
}

/* ======= Botones ======= */
button, input[type="submit"] {
  background: var(--primary);
  border: none;
  border-radius: 6px;
  padding: 8px 16px;
  color: #fff;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
}

button:hover, input[type="submit"]:hover {
  background: #79c0ff;
}

.btn-secondary {
  background: #30363d;
}

.btn-secondary:hover {
  background: #484f58;
}

/* ======= Layout de formularios ======= */
.form-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 15px;
}

.buttons {
  display: flex;
  gap: 10px;
  margin-top: 10px;
}

/* ======= Tablas ======= */
table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 10px;
  background: var(--card-color);
  border-radius: 8px;
  overflow: hidden;
}

th, td {
  text-align: left;
  padding: 10px 12px;
  border-bottom: 1px solid var(--border-color);
}

th {
  background: #21262d;
  color: var(--primary);
  font-weight: 600;
}

tr:hover {
  background: #1c2128;
}

/* ======= Resumen ======= */
#resumen, #graficos {
  background: var(--card-color);
  border-radius: 10px;
  padding: 20px;
  margin-top: 25px;
  box-shadow: 0 0 10px #00000033;
}

.resumen-grid {
  display: flex;
  gap: 15px;
  flex-wrap: wrap;
}

.resumen-item {
  background: #1c2128;
  border: 1px solid var(--border-color);
  border-radius: 8px;
  padding: 15px 20px;
  flex: 1;
  text-align: center;
  min-width: 200px;
}

.resumen-item h3 {
  margin: 0;
  color: var(--muted-color);
  font-weight: 500;
}

.resumen-item p {
  font-size: 1.3rem;
  font-weight: 700;
  margin: 5px 0 0;
  color: var(--text-color);
}

/* ======= Gráficos ======= */
canvas {
  background: transparent;
  max-width: 100%;
  border-radius: 10px;
  margin-top: 15px;
}

/* ======= Utilidades ======= */
hr {
  border: 0;
  border-top: 1px solid var(--border-color);
  margin: 30px 0;
}

.center {
  text-align: center;
}
.form-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
  gap: 15px 20px;
  align-items: end;
}

form {
  background: var(--card-color);
  padding: 20px;
  border-radius: 10px;
  border: 1px solid var(--border-color);
  margin-bottom: 25px;
}

.buttons {
  display: flex;
  gap: 10px;
  justify-content: flex-start;
  margin-top: 15px;
}

// ================== app.js ==================
// Auth, CRUD de proyectos, rendición de gastos, KPIs y consolidado por persona

// ======= Auth =======
const STORAGE_KEY = 'dashproj_auth_v1';
const AUTH_HASH   = '488c013cb6bf0d8e7dae92e89d72a058ed3181a7c8bed1bceb456b2176bb1746'; // SHA-256 de "Tomi.2016"

// ======= Backend =======
const ENDPOINT = 'https://script.google.com/macros/s/AKfycbyth4jXe6dTjOnE6Zyfy8TlUEwVqIVZrp2tYrr2xR4e9N46yGnVpTwhE9w4NVPYl6Zv/exec';

// Reglas por defecto
const DEFAULT_RULES = {
  Vendedor: 0.15,
  Director: 0.18,
  Consultor: 0.50,
  Gasto: 0.03,
  Administracion: 0.04,
  FeeConsultora: 0.10
};
let RULES = loadRules();

const fmt = new Intl.NumberFormat('es-CL', { style:'currency', currency:'CLP', maximumFractionDigits:0 });

// ======= Estado =======
let rows = [];    // proyectos
let gastos = [];  // rendiciones

// ======= Utils =======
function toNumberSafe(v){ return Number(String(v ?? 0).replace(/\./g,'').replace(',', '.')) || 0; }
function cobrar(monto, porc){ return Math.max(0, toNumberSafe(monto) * toNumberSafe(porc) / 100); }
function distribucion(montoPagado){ return Object.fromEntries(Object.entries(RULES).map(([k,v])=>[k, montoPagado * v])); }
function normalizeName(x){ return (x||'').toString().trim().replace(/\s+/g,' '); }
function formatDateDMY(d){
  if(!d) return '';
  const dt = new Date(d);
  if (isNaN(dt)) return String(d);
  const dd = String(dt.getDate()).padStart(2,'0');
  const mm = String(dt.getMonth()+1).padStart(2,'0');
  const yy = dt.getFullYear();
  return `${dd}-${mm}-${yy}`;
}

function fillForm(data){
  const f = document.getElementById('f');
  Object.entries(data).forEach(([k,v])=>{ if (f[k]!==undefined) f[k].value = v; });
  if (data.porc_cobrado !== undefined) document.getElementById('porc_pagado').value = data.porc_cobrado || '';
  if (data.fecha_estimada_pago) document.getElementById('fecha_estimada_pago').value = data.fecha_estimada_pago;
  if (data.fecha_pago) document.getElementById('fecha_pago').value = data.fecha_pago;
  togglePagoFields();
}
function clearForm(){ document.getElementById('f').reset(); togglePagoFields(); }

function loadRules(){
  try {
    const raw = localStorage.getItem('rules_finanzas');
    if (!raw) return {...DEFAULT_RULES};
    const obj = JSON.parse(raw);
    const sum = Object.values(obj).reduce((a,b)=>a+Number(b||0),0);
    if (Math.abs(sum - 1) > 0.0001) return {...DEFAULT_RULES};
    return obj;
  } catch { return {...DEFAULT_RULES}; }
}
function saveRules(){
  localStorage.setItem('rules_finanzas', JSON.stringify(RULES));
  renderResumen();
  renderTable();
  renderConsolidado();
}

// ======= Auth helpers =======
async function sha256hex(str){
  const buf = new TextEncoder().encode(str);
  const hash = await crypto.subtle.digest('SHA-256', buf);
  return [...new Uint8Array(hash)].map(b=>b.toString(16).padStart(2,'0')).join('');
}
function authOk(){
  const v = localStorage.getItem(STORAGE_KEY);
  if(!v) return false;
  try{
    const saved = JSON.parse(v);
    if(Date.now() > saved.exp) return false;
    return saved.hash === AUTH_HASH;
  }catch{ return false; }
}
async function tryAuth(){
  const pass = document.getElementById('authPass').value || '';
  const h = await sha256hex(pass);
  if(h === AUTH_HASH){
    localStorage.setItem(STORAGE_KEY, JSON.stringify({hash:h, exp: Date.now()+24*60*60*1000}));
    document.getElementById('auth').style.display='none';
    document.getElementById('app').style.display='';
    initApp();
  }else{
    document.getElementById('authMsg').textContent = 'Clave incorrecta';
  }
}

// ======= App Init =======
document.getElementById('authBtn').addEventListener('click', tryAuth);
document.getElementById('authPass').addEventListener('keydown', (e)=>{ if(e.key==='Enter') tryAuth(); });

if (authOk()){
  document.getElementById('auth').style.display='none';
  document.getElementById('app').style.display='';
  initApp();
}

function initApp(){
  // Form proyectos
  document.getElementById('f').addEventListener('submit', onSubmitProyecto);
  document.getElementById('btnReset').addEventListener('click', clearForm);
  document.getElementById('q').addEventListener('input', renderTable);
  document.getElementById('fEstado').addEventListener('change', renderTable);

  // Estado → campos condicionales
  document.getElementById('estado').addEventListener('change', togglePagoFields);
  document.getElementById('porc_pagado').addEventListener('input', syncMontoPagadoFromPorc);
  document.getElementById('monto_pagado').addEventListener('input', syncPorcFromMontoPagado);

  // Reglas editables
  renderRulesForm();
  document.getElementById('saveRules').addEventListener('click', onSaveRules);
  document.getElementById('resetRules').addEventListener('click', ()=>{
    RULES = {...DEFAULT_RULES};
    renderRulesForm(true);
    saveRules();
  });

  // Rendición gastos
  document.getElementById('fgasto').addEventListener('submit', onSubmitGasto);
  document.getElementById('g_reset').addEventListener('click', ()=>{
    document.getElementById('fgasto').reset();
    updateDisponible();
  });
  document.getElementById('g_cliente').addEventListener('change', onClienteGastoChange);
  document.getElementById('g_proyecto').addEventListener('change', updateDisponible);

  // Carga inicial
  reload();
}

async function reload(){
  // Proyectos
  try{
    const res = await fetch(ENDPOINT);
    if(!res.ok) throw new Error(`GET ${res.status}`);
    const json = await res.json();
    rows = json.rows || [];
  }catch(err){
    console.error('Error cargando proyectos:', err);
    rows = [];
  }
  // Gastos
  try{
    const res2 = await fetch(`${ENDPOINT}?gastos=1`);
    if(!res2.ok) throw new Error(`GET gastos ${res2.status}`);
    const j2 = await res2.json();
    gastos = j2.gastos || [];
  }catch(err){
    console.error('Error cargando gastos:', err);
    gastos = [];
  }

  renderTable();
  renderResumen();
  hydrateGastosSelectors();
  updateDisponible();
  renderConsolidado();
}

// ======= Estado → campos condicionales =======
function togglePagoFields(){
  const estado = (document.getElementById('estado').value||'').toLowerCase();
  const pagoFields = document.getElementById('pagoFields');
  const grpPorc = document.getElementById('grpPorcPagado');
  const grpMonto = document.getElementById('grpMontoPagado');
  const grpFechaEstimada = document.getElementById('grpFechaEstimada');
  const grpFechaPago = document.getElementById('grpFechaPago');

  pagoFields.style.display = 'none';
  grpPorc.style.display = 'none';
  grpMonto.style.display = 'none';
  grpFechaEstimada.style.display = 'none';
  grpFechaPago.style.display = 'none';

  if (estado === 'pagado parcial'){
    pagoFields.style.display = '';
    grpPorc.style.display = '';
    grpMonto.style.display = '';
    grpFechaEstimada.style.display = '';
  } else if (estado === 'pagado'){
    pagoFields.style.display = '';
    grpPorc.style.display = '';
    grpMonto.style.display = '';
    grpFechaPago.style.display = '';

    const monto = toNumberSafe(document.querySelector('input[name="monto"]').value);
    document.getElementById('porc_pagado').value = 100;
    document.getElementById('monto_pagado').value = monto ? Math.round(monto) : '';
  } else {
    grpFechaEstimada.style.display = '';
  }
}

function syncMontoPagadoFromPorc(){
  const porc = toNumberSafe(document.getElementById('porc_pagado').value);
  const monto = toNumberSafe(document.querySelector('input[name="monto"]').value);
  if (!monto) return;
  const pagado = Math.round(monto * (Math.min(100,Math.max(0,porc))/100));
  document.getElementById('monto_pagado').value = pagado || '';
}
function syncPorcFromMontoPagado(){
  const pagado = toNumberSafe(document.getElementById('monto_pagado').value);
  const monto = toNumberSafe(document.querySelector('input[name="monto"]').value);
  if (!monto) return;
  const porc = Math.round((pagado / monto) * 100);
  document.getElementById('porc_pagado').value = isFinite(porc) ? Math.min(100, Math.max(0, porc)) : '';
}

// ======= Reglas editables =======
function renderRulesForm(resetInputs=false){
  document.getElementById('rule_vendedor').value = (RULES.Vendedor*100).toFixed(1);
  document.getElementById('rule_director').value = (RULES.Director*100).toFixed(1);
  document.getElementById('rule_consultor').value = (RULES.Consultor*100).toFixed(1);
  document.getElementById('rule_gasto').value = (RULES.Gasto*100).toFixed(1);
  document.getElementById('rule_admin').value = (RULES.Administracion*100).toFixed(1);
  document.getElementById('rule_fee').value = (RULES.FeeConsultora*100).toFixed(1);
  updateRulesTotalBadge();
  if (!resetInputs){
    ['rule_vendedor','rule_director','rule_consultor','rule_gasto','rule_admin','rule_fee'].forEach(id=>{
      document.getElementById(id).addEventListener('input', updateRulesTotalBadge);
    });
  }
}
function updateRulesTotalBadge(){
  const vals = [
    toNumberSafe(document.getElementById('rule_vendedor').value),
    toNumberSafe(document.getElementById('rule_director').value),
    toNumberSafe(document.getElementById('rule_consultor').value),
    toNumberSafe(document.getElementById('rule_gasto').value),
    toNumberSafe(document.getElementById('rule_admin').value),
    toNumberSafe(document.getElementById('rule_fee').value),
  ];
  const total = vals.reduce((a,b)=>a+b,0);
  const badge = document.getElementById('rulesTotal');
  badge.textContent = `Total: ${total.toFixed(1)}%`;
  badge.classList.toggle('badge--ok', Math.abs(total-100)<0.01);
  badge.classList.toggle('badge--error', Math.abs(total-100)>=0.01);
}
function onSaveRules(){
  const pctToFrac = v => toNumberSafe(v)/100;
  const next = {
    Vendedor: pctToFrac(document.getElementById('rule_vendedor').value),
    Director: pctToFrac(document.getElementById('rule_director').value),
    Consultor: pctToFrac(document.getElementById('rule_consultor').value),
    Gasto: pctToFrac(document.getElementById('rule_gasto').value),
    Administracion: pctToFrac(document.getElementById('rule_admin').value),
    FeeConsultora: pctToFrac(document.getElementById('rule_fee').value),
  };
  const sum = Object.values(next).reduce((a,b)=>a+b,0);
  if (Math.abs(sum-1) > 0.0001){
    alert('Las reglas deben sumar exactamente 100%.');
    return;
  }
  RULES = next;
  saveRules();
  alert('✅ Reglas guardadas');
}

// ======= Tabla Proyectos =======
function renderTable(){
  const q = (document.getElementById('q').value||'').toLowerCase();
  const filtro = (document.getElementById('fEstado')?.value||'');
  const tbody = document.querySelector('#tbl tbody');
  tbody.innerHTML = '';

  const estadoDisplay = (e, porc) => {
    const est = (e||'').toLowerCase();
    if (est === 'pagado') return 'Pagado';
    if (est === 'pagado parcial') return 'Pagado parcial';
    if (Number(porc) >= 100) return 'Pagado';
    if (Number(porc) > 0 && Number(porc) < 100 && est !== 'cancelado') return 'Pagado parcial';
    return e || 'En curso';
  };
  const estadoClass = (label) => {
    const map = {
      'Prospecto':'gray','Propuesta':'gray','Aprobado':'blue','En curso':'blue',
      'Pausado':'yellow','Finalizado':'green','Cancelado':'red','Facturado':'purple',
      'Pagado parcial':'orange','Pagado':'green-strong'
    };
    return `badge badge--${map[label]||'gray'}`;
  };

  const data = rows.filter(r => {
    const textOk = `${r.cliente} ${r.proyecto}`.toLowerCase().includes(q);
    const label = estadoDisplay(r.estado, r.porc_cobrado);
    const estadoOk = !filtro || filtro === label;
    return textOk && estadoOk;
  });

  for(const r of data){
    const pagado = cobrar(r.monto, r.porc_cobrado);
    const label = estadoDisplay(r.estado, r.porc_cobrado);

    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${formatDateDMY(r.fecha)}</td>
      <td>${r.cliente||''}</td>
      <td>${r.proyecto||''}</td>
      <td class="r">${fmt.format(toNumberSafe(r.monto))}</td>
      <td class="r">${toNumberSafe(r.porc_cobrado)}%</td>
      <td class="r">${fmt.format(pagado)}</td>
      <td>${r.vendedor||''}</td>
      <td>${r.director||''}</td>
      <td>${r.consultor||''}</td>
      <td>${r.administracion||''}</td>
      <td>${r.gasto||''}</td>
      <td>${r.fee_consultora||''}</td>
      <td><span class="${estadoClass(label)}">${label}</span></td>
      <td><button data-id="${r.id}">✏️</button></td>`;
    tr.querySelector('button').addEventListener('click', ()=>{
      fillForm(r);
      window.scrollTo({top:0, behavior:'smooth'});
    });
    tbody.appendChild(tr);
  }
}

// ======= KPIs / Resumen =======
function renderResumen(){
  let total = 0, pagado = 0;
  for(const r of rows){
    total += toNumberSafe(r.monto||0);
    pagado += cobrar(r.monto, r.porc_cobrado);
  }
  const saldo = Math.max(0, total - pagado);

  document.getElementById('kpiVentas').textContent = fmt.format(total);
  document.getElementById('kpiCobrado').textContent = fmt.format(pagado);
  document.getElementById('kpiSaldo').textContent = fmt.format(saldo);
}

// ======= Selectores de gastos / disponible =======
function hydrateGastosSelectors(){
  const cSel = document.getElementById('g_cliente');
  const pSel = document.getElementById('g_proyecto');
  cSel.innerHTML = ''; pSel.innerHTML = '';

  const clientes = Array.from(new Set(rows.map(r=>r.cliente).filter(Boolean))).sort((a,b)=>a.localeCompare(b));
  cSel.insertAdjacentHTML('beforeend','<option value="" disabled selected>Selecciona cliente</option>');
  clientes.forEach(c=> cSel.insertAdjacentHTML('beforeend', `<option>${c}</option>`));

  pSel.insertAdjacentHTML('beforeend','<option value="" disabled selected>Selecciona proyecto</option>');
}

function onClienteGastoChange(){
  const cliente = document.getElementById('g_cliente').value;
  const pSel = document.getElementById('g_proyecto');
  pSel.innerHTML = '<option value="" disabled selected>Selecciona proyecto</option>';
  rows.filter(r=>r.cliente===cliente).forEach(r=>{
    pSel.insertAdjacentHTML('beforeend', `<option>${r.proyecto}</option>`);
  });
  updateDisponible();
}

function calcDisponible(cliente, proyecto){
  const pr = rows.find(r=>r.cliente===cliente && r.proyecto===proyecto);
  if(!pr) return {disponible:0, gastado:0, base:0};
  const pagado = cobrar(pr.monto, pr.porc_cobrado);
  const baseGasto = pagado * (RULES.Gasto || 0);
  const gastado = gastos
      .filter(g=>g.cliente===cliente && g.proyecto===proyecto)
      .reduce((s,g)=>s+toNumberSafe(g.monto),0);
  return { disponible: Math.max(0, baseGasto - gastado), gastado, base: baseGasto };
}

function updateDisponible(){
  const cliente = document.getElementById('g_cliente').value;
  const proyecto = document.getElementById('g_proyecto').value;
  const info = document.getElementById('boxDisponible');
  if(!cliente || !proyecto){ info.textContent=''; return; }
  const {disponible, gastado, base} = calcDisponible(cliente, proyecto);
  info.textContent = `Gasto disponible: ${fmt.format(disponible)}   (Gastado: ${fmt.format(gastado)} / Base: ${fmt.format(base)})`;
}

// ======= Submit Gasto =======
async function onSubmitGasto(e){
  e.preventDefault();
  const fecha = document.getElementById('g_fecha').value;
  const monto = toNumberSafe(document.getElementById('g_monto').value);
  const cliente = document.getElementById('g_cliente').value;
  const proyecto = document.getElementById('g_proyecto').value;

  if (!cliente || !proyecto){
    alert('Selecciona cliente y proyecto.');
    return;
  }
  const {disponible} = calcDisponible(cliente, proyecto);
  if (monto > disponible){
    alert('El monto del gasto excede lo disponible para este proyecto.');
    return;
  }

  try{
    await fetch(ENDPOINT, {
      method:'POST',
      headers:{'Content-Type':'text/plain;charset=utf-8'},
      body: JSON.stringify({ __kind:'gasto', fecha_gasto:fecha, monto, cliente, proyecto })
    });
  }catch(err){
    console.error('Error registrando gasto', err);
    alert('No se pudo registrar el gasto.');
    return;
  }

  document.getElementById('fgasto').reset();
  await reload();
  alert('✅ Gasto registrado');
}

// ======= Submit Proyecto (create/update) =======
async function onSubmitProyecto(e){
  e.preventDefault();
  const form = e.target;
  const data = Object.fromEntries(new FormData(form).entries());

  // Derivar % pagado desde monto_pagado cuando aplique
  const estado = (document.getElementById('estado').value||'').toLowerCase();
  const monto = toNumberSafe(document.querySelector('input[name="monto"]').value);
  const montPag = toNumberSafe(document.getElementById('monto_pagado').value);

  if (estado === 'pagado'){
    data.porc_cobrado = 100;
  } else if (estado === 'pagado parcial'){
    if (montPag && monto){
      data.porc_cobrado = Math.min(100, Math.max(0, Math.round((montPag/monto)*100)));
    }
  }

  if (data.monto!==undefined) data.monto = toNumberSafe(data.monto);
  if (data.porc_cobrado!==undefined) data.porc_cobrado = Math.min(100, Math.max(0, toNumberSafe(data.porc_cobrado)));
  if (!data.id) delete data.id;

  try{
    await fetch(ENDPOINT, {
      method: 'POST',
      headers: {'Content-Type':'text/plain;charset=utf-8'},
      body: JSON.stringify(data)
    });
  }catch(err){
    console.error('Error guardando proyecto:', err);
    alert('⚠️ No se pudo guardar. Revisa conexión/ENDPOINT/Deploy del Apps Script.');
    return;
  }

  clearForm();
  await reload();
  alert('✅ Cambios guardados');
}

// ======= Consolidado por persona/organización =======
function computeAggregatesByPerson(){
  // Retorna un mapa: persona -> {Vendedor, Director, Consultor, Administracion, Gasto, FeeConsultora, Total}
  const ROLE_FIELDS = {
    Vendedor: 'vendedor',
    Director: 'director',
    Consultor: 'consultor',
    Administracion: 'administracion',
    Gasto: 'gasto',
    FeeConsultora: 'fee_consultora'
  };
  const acc = new Map();

  for(const r of rows){
    const pag = cobrar(r.monto, r.porc_cobrado);
    for(const [rol, pct] of Object.entries(RULES)){
      const field = ROLE_FIELDS[rol];
      const persona = normalizeName(r[field]);
      if(!persona) continue;
      const montoRol = pag * pct;

      if(!acc.has(persona)){
        acc.set(persona, { Vendedor:0, Director:0, Consultor:0, Administracion:0, Gasto:0, FeeConsultora:0, Total:0 });
      }
      const o = acc.get(persona);
      o[rol] += montoRol;
      o.Total += montoRol;
    }
  }
  return acc;
}

function renderConsolidado(){
  const tbody = document.querySelector('#tblConsolidado tbody');
  const tVend = document.getElementById('tVend');
  const tDir  = document.getElementById('tDir');
  const tCons = document.getElementById('tCons');
  const tAdm  = document.getElementById('tAdm');
  const tGas  = document.getElementById('tGas');
  const tFee  = document.getElementById('tFee');
  const tTot  = document.getElementById('tTot');

  tbody.innerHTML = '';
  let sumVend=0,sumDir=0,sumCons=0,sumAdm=0,sumGas=0,sumFee=0,sumTot=0;

  const acc = computeAggregatesByPerson();
  const rowsP = Array.from(acc.entries())
    .map(([persona, vals]) => ({ persona, ...vals }))
    .sort((a,b)=> b.Total - a.Total);

  for(const p of rowsP){
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${p.persona}</td>
      <td class="r">${fmt.format(p.Vendedor)}</td>
      <td class="r">${fmt.format(p.Director)}</td>
      <td class="r">${fmt.format(p.Consultor)}</td>
      <td class="r">${fmt.format(p.Administracion)}</td>
      <td class="r">${fmt.format(p.Gasto)}</td>
      <td class="r">${fmt.format(p.FeeConsultora)}</td>
      <td class="r"><strong>${fmt.format(p.Total)}</strong></td>`;
    tbody.appendChild(tr);

    sumVend+=p.Vendedor; sumDir+=p.Director; sumCons+=p.Consultor;
    sumAdm+=p.Administracion; sumGas+=p.Gasto; sumFee+=p.FeeConsultora; sumTot+=p.Total;
  }

  tVend.textContent = fmt.format(sumVend);
  tDir.textContent  = fmt.format(sumDir);
  tCons.textContent = fmt.format(sumCons);
  tAdm.textContent  = fmt.format(sumAdm);
  tGas.textContent  = fmt.format(sumGas);
  tFee.textContent  = fmt.format(sumFee);
  tTot.textContent  = fmt.format(sumTot);
}
/* Inputs blancos sobre tema oscuro */
input, select, textarea {
  background: #ffffff !important;
  color: #111 !important;
  border: 1px solid var(--border-color);
  border-radius: 6px;
}
input::placeholder, textarea::placeholder { color: #777; }
input:focus, select:focus, textarea:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 6px #58a6ff55;
}

/* Barra de KPIs con mini gráficos al lado */
.kpi-bar {
  display: grid;
  grid-template-columns: 1fr auto;
  gap: 16px;
  align-items: center;
}
.kpis { margin: 0; } /* ya la tienes, esto asegura menor margen */

.mini-charts {
  display: grid;
  gap: 10px;
  align-content: start;
}
.mini-chart {
  background: var(--card-color);
  border: 1px solid var(--border-color);
  border-radius: 10px;
  padding: 10px;
  width: 180px;         /* compacto */
}
.mini-chart h4 {
  margin: 0 0 6px 0;
  font-size: 0.9rem;
  color: var(--muted-color);
  font-weight: 600;
}
.mini-chart canvas {
  width: 160px !important;
  height: 160px !important;
}

/* Responsive: debajo de 900px, apila */
@media (max-width: 900px){
  .kpi-bar { grid-template-columns: 1fr; }
  .mini-charts { grid-template-columns: repeat(auto-fit, minmax(160px, 1fr)); }
}
